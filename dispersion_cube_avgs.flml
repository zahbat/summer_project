<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">cube_disp</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="empty_bldng">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">10</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="VelocityMesh"/>
    <checkpointing>
      <checkpoint_period_in_dumps>
        <integer_value rank="0">25</integer_value>
      </checkpoint_period_in_dumps>
      <checkpoint_at_end/>
    </checkpointing>
    <stat/>
    <detectors>
      <fail_outside_domain/>
    </detectors>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">20000</real_value>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">2</integer_value>
    </nonlinear_iterations>
  </timestepping>
  <material_phase name="Air">
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin/>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method/>
        </scheme>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="hypre">
            <hypre_type name="boomeramg"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1e-07</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1700</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <print_norms/>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="Outlet">
          <surface_ids>
            <integer_value shape="1" rank="1">4</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="Boussinesq"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <lump_mass_matrix/>
            </mass_terms>
            <advection_terms/>
            <stress_terms>
              <tensor_form/>
            </stress_terms>
            <les_model>
              <second_order>
                <smagorinsky_coefficient>
                  <real_value rank="0">0.1</real_value>
                </smagorinsky_coefficient>
                <length_scale_type>tensor</length_scale_type>
              </second_order>
            </les_model>
            <buoyancy/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-07</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">700</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <print_norms/>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
   import numpy as np
   Uref = 2.0
   h = 100.0
   znorm = X[2]/h
   
   if X[2] &gt; 0.0:
      u = 0.1768*np.log(znorm) + 1.0226
   else:
      u = 0.0
      
   u = u*Uref
      
   return [u, 0.0, 0.0]</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="Inflow">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <synthetic_eddy_method>
                  <number_of_eddies>
                    <integer_value rank="0">4000</integer_value>
                  </number_of_eddies>
                  <turbulence_lengthscale>
                    <constant>
                      <real_value rank="0">20</real_value>
                    </constant>
                  </turbulence_lengthscale>
                  <mean_profile>
                    <python>
                      <string_value lines="20" type="code" language="python">def val(X,t):
   import numpy as np
   Uref = 2.0
   h = 100.0
   znorm = X[2]/h
   
   if X[2] &gt; 0.0:
      u = 0.1768*np.log(znorm) + 1.0226
   else:
      u = 0.0
      
   u = u*Uref
      
   return u</string_value>
                    </python>
                  </mean_profile>
                  <Re_stresses_profile>
                    <python>
                      <string_value lines="20" type="code" language="python">def val(X,t):
   import numpy as np
   Uref = 2.0
   h = 100.0
   znorm = X[2]/h
   
   uu_norm = 0.007*np.power(znorm,3) + 0.0085*np.power(znorm,2) - 0.0337*znorm + 0.0192

   
   uu = uu_norm*np.power(Uref,2)
   
   if X[2]&gt;h:
     uu_norm = 0.007 + 0.0085 - 0.0337 + 0.0192
     uu = uu_norm*np.power(Uref,2)
   if X[2]==0:
     uu=0.0
   uu = 2.*uu
   return uu</string_value>
                    </python>
                  </Re_stresses_profile>
                </synthetic_eddy_method>
              </x_component>
              <y_component>
                <synthetic_eddy_method>
                  <number_of_eddies>
                    <integer_value rank="0">4000</integer_value>
                  </number_of_eddies>
                  <turbulence_lengthscale>
                    <constant>
                      <real_value rank="0">20</real_value>
                    </constant>
                  </turbulence_lengthscale>
                  <mean_profile>
                    <constant>
                      <real_value rank="0">0</real_value>
                    </constant>
                  </mean_profile>
                  <Re_stresses_profile>
                    <python>
                      <string_value lines="20" type="code" language="python">def val(X,t):
   import numpy as np
   Uref = 2.0
   h = 100.0
   znorm = X[2]/h
   
   vv_norm = -0.0076*np.power(znorm,3) + 0.02*np.power(znorm,2) - 0.0218*znorm + 0.0099

   
   vv = vv_norm*np.power(Uref,2)
   
   if X[2]&gt;h:
     vv_norm = -0.0076 + 0.02 - 0.0218 + 0.0099
     vv = vv_norm*np.power(Uref,2)
   if X[2]==0:
     vv=0.0
   vv = 2.*vv
   return vv</string_value>
                    </python>
                  </Re_stresses_profile>
                </synthetic_eddy_method>
              </y_component>
              <z_component>
                <synthetic_eddy_method>
                  <number_of_eddies>
                    <integer_value rank="0">4000</integer_value>
                  </number_of_eddies>
                  <turbulence_lengthscale>
                    <constant>
                      <real_value rank="0">20</real_value>
                    </constant>
                  </turbulence_lengthscale>
                  <mean_profile>
                    <constant>
                      <real_value rank="0">0</real_value>
                    </constant>
                  </mean_profile>
                  <Re_stresses_profile>
                    <python>
                      <string_value lines="20" type="code" language="python">def val(X,t):
   import numpy as np
   Uref = 2.0
   h = 100.0
   znorm = X[2]/h
   
   ww_norm = -0.0021*np.power(znorm,3) + 0.0064*np.power(znorm,2) - 0.0097*znorm + 0.0061
   
   ww = ww_norm*np.power(Uref,2)
   
   if X[2]&gt;h:
     ww_norm = -0.0021 + 0.0064 - 0.0097 + 0.0061
     ww = ww_norm*np.power(Uref,2)
   if X[2]==0:
     ww=0.0
   ww = 2.*ww
   return ww</string_value>
                    </python>
                  </Re_stresses_profile>
                </synthetic_eddy_method>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Sides">
          <surface_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <y_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Top">
          <surface_ids>
            <integer_value shape="1" rank="1">3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <z_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="BottomandWalls">
          <surface_ids>
            <integer_value shape="2" rank="1">5 6</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <anisotropic_symmetric>
                <constant>
                  <real_value symmetric="true" dim2="dim" shape="3 3" dim1="dim" rank="2">1.81e-05 1.81e-05 1.81e-05 1.81e-05 1.81e-05 1.81e-05 1.81e-05 1.81e-05 1.81e-05</real_value>
                </constant>
              </anisotropic_symmetric>
            </value>
            <output>
              <exclude_from_vtu/>
            </output>
          </prescribed>
        </tensor_field>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="CFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="uu" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">uvw = state.vector_fields["Velocity"]
uvw_m = state.vector_fields["Velocity_time_average"]

for i in range(field.node_count):
    uu = (uvw.node_val(i)[0] - uvw_m.node_val(i)[0]) * (uvw.node_val(i)[0] - uvw_m.node_val(i)[0])
    field.set(i, uu)</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output>
          <checkpoint/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="uu_mean" rank="0">
      <diagnostic>
        <algorithm source_field_type="scalar" material_phase_support="single" name="time_averaged_scalar" source_field_name="uu">
          <spin_up_time>
            <real_value rank="0">1000</real_value>
          </spin_up_time>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output>
          <checkpoint/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="vv" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">uvw = state.vector_fields["Velocity"]
uvw_m = state.vector_fields["Velocity_time_average"]

for i in range(field.node_count):
    vv = (uvw.node_val(i)[1] - uvw_m.node_val(i)[1]) * (uvw.node_val(i)[1] - uvw_m.node_val(i)[1])
#    field.set(i, vv)
#for i in range(field.node_count):
#    vv = (uvw.node_val(i)[1]) * (uvw.node_val(i)[1])
    field.set(i, vv)</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output>
          <checkpoint/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="vv_mean" rank="0">
      <diagnostic>
        <algorithm source_field_type="scalar" material_phase_support="single" name="time_averaged_scalar" source_field_name="vv">
          <spin_up_time>
            <real_value rank="0">1000</real_value>
          </spin_up_time>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output>
          <checkpoint/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="ww" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">uvw = state.vector_fields["Velocity"]
uvw_m = state.vector_fields["Velocity_time_average"]

for i in range(field.node_count):
    ww = (uvw.node_val(i)[2] - uvw_m.node_val(i)[2]) * (uvw.node_val(i)[2] - uvw_m.node_val(i)[2])
#    field.set(i, ww)

#for i in range(field.node_count):
#    ww = (uvw.node_val(i)[2]) * (uvw.node_val(i)[2])
    field.set(i, ww)</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output>
          <checkpoint/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="ww_mean" rank="0">
      <diagnostic>
        <algorithm source_field_type="scalar" material_phase_support="single" name="time_averaged_scalar" source_field_name="ww">
          <spin_up_time>
            <real_value rank="0">1000</real_value>
          </spin_up_time>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output>
          <checkpoint/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="tracer1" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <limit_face_value>
                <limiter name="Sweby"/>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <control_volumes>
            <number_advection_iterations>
              <integer_value rank="0">2</integer_value>
            </number_advection_iterations>
          </control_volumes>
        </temporal_discretisation>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="hypre">
            <hypre_type name="boomeramg"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1e-07</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">1e-10</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">500</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="Inflow">
          <surface_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <anisotropic_symmetric>
                <constant>
                  <real_value symmetric="true" dim2="dim" shape="3 3" dim1="dim" rank="2">1.81e-05 1.81e-05 1.81e-05 1.81e-05 1.81e-05 1.81e-05 1.81e-05 1.81e-05 1.81e-05</real_value>
                </constant>
              </anisotropic_symmetric>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <scalar_field name="Source" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
  import numpy as np
  X0 = -48.
  Y0 = 0.0
  Z0 = 12.
  R = 4.
  
  s = 0.0
  if(np.sqrt((X[0]-X0)**2. + (X[1]-Y0)**2. + (X[2]-Z0)**2.))&lt;=R:
    s = 10.
  
  return s</string_value>
              </python>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="tracer1Average" rank="0">
      <diagnostic>
        <algorithm source_field_type="scalar" material_phase_support="single" name="time_averaged_scalar" source_field_name="tracer1">
          <spin_up_time>
            <real_value rank="0">50</real_value>
          </spin_up_time>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="Velocity_time_average" rank="1">
      <diagnostic>
        <algorithm source_field_type="vector" material_phase_support="single" name="time_averaged_vector" source_field_name="Velocity">
          <spin_up_time>
            <real_value rank="0">50</real_value>
          </spin_up_time>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output>
          <checkpoint/>
        </output>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </diagnostic>
    </vector_field>
  </material_phase>
</fluidity_options>
